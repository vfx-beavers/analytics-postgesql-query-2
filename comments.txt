Некоторые моменты и пояснения:

1) В 7-дневном периоде колонки J-L по своей сути выглядят одинаковыми. После уточняющего вопроса предложено вторую колонку взять как текущая дата - 7 дней, но в выборке данных за этот период нет, поэтому оставлено как есть.
2) В исходнике test_sales.csv F_SALE_QTY - количество продаж везде 0. --Уточнено в ответе--.
3) В примере вывода столбец I -  % Скидки/ % кэшбэка. Обычно считается от фактической продажи и справочника базовых цен. --Уточнено в ответе--.
4) Средние продажи по товару с днями без продаж не посчитаны тк будет деление на 0. Взято общее кол-во дней периода.
5) в test_promo_fact1.csv имя столбца PROMO_ORD_CONF_QTY. Возможно опечатка
6) Наименования колонок из примера выгрузки длиннее стандарта postgres (59 знака). Добавлен этап переименования столбцов скриптом перед итоговой выгрузкой.
7) В выходном файле, одновременно в одном диапазоне дат, имеются данные о трёх промо периодах. При разнесении дат, будут пустые поля. Возможно для аналитики было бы лучше иметь сводный файл без пропусков. Для этого надо или объединять колонки всех периодов по горизонтали, добавляя к каждому набору свою колонку с датами или объединять всё по вертикали, оставляя универсальные колонки для каждой промоакции. При этом можно добавить техническую колонку имени промо периода для быстрой фильтрации.

В текущем варианте выгрузка подогнана под exel пример, поэтому имеет пустые значения в полях, при совмещении периодов.

Список файлов в порядке очерёдности запуска:
0_import_csv.py - импорт, приведение типов и экспорт в промежуточные csv
1_ddl.sql - создание и заполнение таблиц
2_sql_query_assemble.sql - формирование колонок
3_dml.sql - выгрузка в сводную таблицу
4_export_exel.py - переименование итоговых столбцов и выгрузка в exel
db_and_views_backup-de - слепок db и view для проверки
docker.txt - строка для тестового докера